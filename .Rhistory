#Generating historgram
hist(posterior$beta.cur, main = "Histogram for beta", ylab = "Frequency", xlab= "beta")
#plotting scatterplot
plot(posterior$alpha.cur, posterior$beta.cur, main = "bivariate posterior distribution")
#plotting scatterplot
plot(posterior$alpha.cur, posterior$beta.cur, main = "bivariate posterior distribution", xlab = "alpha", ylab = "beta")
hist(posterior$alpha.cur, main = "Histogram for alpha", ylab = "Frequency", xlab= "alpha")
#gibbs2 <- function(n.sims, beta.start, alpha.start, theta.start, gamma, delta, y, t) {
gibbs2 <- function(n.sims, beta.start, alpha.start, gamma, delta, y, t) {
#theta.cur <- matrix(NA, nrow = n.sims, ncol = length(y))
#theta.cur[1,] <- theta.start
#posterior for theta stays the same
#theta.update <- function(alpha, beta, y, t) {rgamma(length(y), y + alpha, t + beta)}
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
#Step 5: Generating theta with our new alpha and beta values
#theta.cur[i,] <- theta.update(alpha = alpha.cur[i], beta = beta.cur[i], y = y, t = t)
#return(list(theta.cur = theta.cur, beta.cur = beta.cur, alpha.cur = alpha.cur))
return(list(beta.cur = beta.cur, alpha.cur = alpha.cur))
}
posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.01, delta = 1, y = y, t = t)
#posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.01, delta = 1, y = y, t = t)
posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, gamma = 0.01, delta = 1, y = y, t = t)
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
#Step 5: Generating theta with our new alpha and beta values
#theta.cur[i,] <- theta.update(alpha = alpha.cur[i], beta = beta.cur[i], y = y, t = t)
#return(list(theta.cur = theta.cur, beta.cur = beta.cur, alpha.cur = alpha.cur))
return(list(beta.cur = beta.cur, alpha.cur = alpha.cur))
#posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.01, delta = 1, y = y, t = t)
posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, gamma = 0.01, delta = 1, y = y, t = t)
#gibbs2 <- function(n.sims, beta.start, alpha.start, theta.start, gamma, delta, y, t) {
gibbs2 <- function(n.sims, beta.start, alpha.start, gamma, delta, y, t) {
#theta.cur <- matrix(NA, nrow = n.sims, ncol = length(y))
#theta.cur[1,] <- theta.start
#posterior for theta stays the same
#theta.update <- function(alpha, beta, y, t) {rgamma(length(y), y + alpha, t + beta)}
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
#Step 5: Generating theta with our new alpha and beta values
#theta.cur[i,] <- theta.update(alpha = alpha.cur[i], beta = beta.cur[i], y = y, t = t)
#return(list(theta.cur = theta.cur, beta.cur = beta.cur, alpha.cur = alpha.cur))
return(list(beta.cur = beta.cur, alpha.cur = alpha.cur))
}
#posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.01, delta = 1, y = y, t = t)
posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, gamma = 0.01, delta = 1, y = y, t = t)
#1e
#Our data
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94, 16, 63, 126, 5, 31, 1, 1, 2, 10)
rbind(y, t)
n.sims = 10000
alpha.start = 1
beta.start = 1
theta.start = rep(1,10)
#gibbs2 <- function(n.sims, beta.start, alpha.start, theta.start, gamma, delta, y, t) {
gibbs2 <- function(n.sims, beta.start, alpha.start, gamma, delta, y, t) {
#theta.cur <- matrix(NA, nrow = n.sims, ncol = length(y))
#theta.cur[1,] <- theta.start
#posterior for theta stays the same
#theta.update <- function(alpha, beta, y, t) {rgamma(length(y), y + alpha, t + beta)}
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
#Step 5: Generating theta with our new alpha and beta values
#theta.cur[i,] <- theta.update(alpha = alpha.cur[i], beta = beta.cur[i], y = y, t = t)
#return(list(theta.cur = theta.cur, beta.cur = beta.cur, alpha.cur = alpha.cur))
return(list(beta.cur = beta.cur, alpha.cur = alpha.cur))
}
#posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.01, delta = 1, y = y, t = t)
posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, gamma = 0.01, delta = 1, y = y, t = t)
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
#posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.01, delta = 1, y = y, t = t)
posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, gamma = 0.01, delta = 1, y = y, t = t)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#1e
#Our data
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94, 16, 63, 126, 5, 31, 1, 1, 2, 10)
rbind(y, t)
n.sims = 10000
alpha.start = 1
beta.start = 1
#gibbs2 <- function(n.sims, beta.start, alpha.start, theta.start, gamma, delta, y, t) {
gibbs2 <- function(n.sims, beta.start, alpha.start, gamma, delta, y, t) {
#theta.cur <- matrix(NA, nrow = n.sims, ncol = length(y))
#theta.cur[1,] <- theta.start
#posterior for theta stays the same
#theta.update <- function(alpha, beta, y, t) {rgamma(length(y), y + alpha, t + beta)}
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
#Step 5: Generating theta with our new alpha and beta values
#theta.cur[i,] <- theta.update(alpha = alpha.cur[i], beta = beta.cur[i], y = y, t = t)
#return(list(theta.cur = theta.cur, beta.cur = beta.cur, alpha.cur = alpha.cur))
return(list(beta.cur = beta.cur, alpha.cur = alpha.cur))
}
#posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.01, delta = 1, y = y, t = t)
posterior2 <- gibbs2(n.sims = 10000, beta.start = 1, alpha.start = 1, gamma = 0.01, delta = 1, y = y, t = t)
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
#alpha and beta have a joint posterior now
alphabeta.posterior <- function(alpha,beta,y,t){
gamma(y+alpha)/(t+beta)^(y+alpha)*((beta^(10*alpha))/gamma(alpha)^10)*exp(-alpha)*beta^(0.1-1)*exp(-beta)
}
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
alpha.cur <- alpha.start #initial alpha
beta.cur <- beta.start #initial beta
for(i in 2:n.sims){
#Step 1: generate proposed alpha and beta
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
beta.cur[i]<- rnorm(1,beta.cur[i-1],0.5)
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
if(beta.cur[i] < 0) {beta.cur[i] <- beta.cur[i-1]}
#if(theta.cur[i,] < 0) {theta.cur[i,] <-theta.cur[i-1,]}
}
alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t)
#Step 2: acceptance probability, evaluating alpha and beta at current proposal and previous position
p_acc = min(1,alphabeta.posterior(alpha.cur[i], beta.cur[i], y, t)/alphabeta.posterior(alpha.cur[i-1], beta.cur[i-1], y, t))
#Step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value or instead select the previous values for alpha and beta
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
beta.cur[i] <- beta.cur[i-1]
}
hist(alpha.cur)
hist(beta.cur)
plot(alpha.cur, beta.cur)
pi
pi/4
p2= pi/4
px1=1/2
px2= pi/4
px3=(1-pi)/4
px4=(1-pi)/4
my_prob <- c(px1,px2,px3,px4)
p = runif(1)
y = c(125, 18, 20, 34)
p = runif(1)
px1=1/2
px2= p/4
px3=(1-p)/4
px4=(1-p)/4
px5 = p/4
my_prob <- c(px1,px2,px3,px4)
number_of_experiments <- 10
number_of_samples <- 197
experiments <- rmultinom(n=number_of_experiments, size=number_of_samples, prob=my_prob)
experiments
df=data.frame(experiments)/number_of_samples
par(mfrow=c(2,5))
for(i in 1:10) {
barplot(df[,i],ylim=c(0,1))
}
estep <- function(theta,z2){
z2 = 125*(0.25*theta/(0.5+0.25*theta))
# z1 = 125*(0.5/(0.5+0.25*theta))
return(z2)
}
mstep <- function(theta,z2){
theta <- (z2+34)/(z2+34+18+20)
return(theta)
}
cur_theta = 0.5
maxit = 100
maxit=1000
tol=1e-6
for(i in 1:maxit){
new_z2 <- estep(cur_theta,cur_z2)
new_theta <- mstep(cur_theta,new_z2)
# Stop iteration if the difference between the current and new estimates is less than a tolerance level
if( all(abs(cur_theta - new_theta) < tol) ){ flag <- 1; break}
# Otherwise continue iteration
cur_theta <- new_theta
cur_z2 <- new_z2
}
if(!flag) warning("Didn’t converge\n")
final_theta = cur_theta
paste0("Final Theta = ", format(round(cur_theta, 4), nsmall = 4))
paste0("Final Z2 = ", format(round(cur_z2, 4), nsmall = 4))
number_of_experiments <- 1
number_of_samples <- 1000
experiments <- rmultinom(n=number_of_experiments, size=number_of_samples, prob=my_prob)
experiments
df=data.frame(experiments)/number_of_samples
par(mfrow=c(1,1))
x<-df[,1]
names(x)<- c("p1","p2","p3","p4")
barplot(x,ylim=c(0,1),main="Estimation with observed data only")
#Our data:
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94, 16, 63, 126, 5, 31, 1, 1, 2, 10)
rbind(y, t)
beta.cur <- 1
alpha.cur <- 1
gibbs <- function(n.sims, beta.start, alpha.start, theta.start, gamma, delta, y, t) {
beta.draws <- c()
theta.cur <- matrix(NA, nrow = n.sims, ncol = length(y))
beta.cur <- beta.start #initial beta
theta.cur[1,] <- theta.start #initial theta
#initializing posteriors for theta, alpha, and beta
theta.update <- function(alpha, beta, y, t) {rgamma(length(y), y + alpha, t + beta)}
alpha.posterior <- function(alpha, beta, theta){((beta^(10*alpha))/gamma(alpha)^10)*(prod(theta)^alpha)*exp(-alpha)}
beta.update <- function(alpha, gamma, delta, theta,y) {rgamma(1, length(y) * alpha + gamma, delta + sum(theta))}
alpha.cur <- alpha.start #initial alpha
for(i in 2:n.sims){
#Step 1: generate proposed alpha
alpha.cur[i]<- rnorm(1,alpha.cur[i-1],0.5)
#Step 2: acceptance probability, evaluating alpha given beta, theta, and y at current alpha and previous alpha
p_acc = min(1,alpha.posterior(alpha.cur[i], beta.cur[i-1], theta.cur[i-1,])/alpha.posterior(alpha.cur[i-1], beta.cur[i-1], theta.cur[i-1,]))
#step 3: Generating a random U from uniform distribution
U = runif(1)
#Step 4: using p_acc we decide if we keep the current value orinstead accept previous value.
if(U > p_acc){
alpha.cur[i] <- alpha.cur[i-1]
}
if(alpha.cur[i] < 0) {alpha.cur[i] <- alpha.cur[i-1]}
#step 5: Generating beta with our new alpha values
beta.cur[i] <- beta.update(alpha = alpha.cur[i], gamma = gamma, delta = delta, theta = theta.cur[i-1,], y = y)
#step 6: Generating theta with our new theta values
theta.cur[i,] <- theta.update(alpha = alpha.cur[i], beta = beta.cur[i], y = y, t = t)
}
return(list(theta.cur = theta.cur, beta.cur = beta.cur, alpha.cur = alpha.cur))
}
posterior <- gibbs(n.sims = 10000, beta.start = 1, alpha.start = 1, theta.start = rep(1,10), gamma = 0.1, delta = 1, y = y, t = t)
#showing the posterior values
posterior$beta.cur
posterior$theta.cur
posterior$alpha.cur
#Generating historgram
hist(posterior$beta.cur, main = "Histogram for beta", ylab = "Frequency", xlab= "beta")
hist(posterior$alpha.cur, main = "Histogram for alpha", ylab = "Frequency", xlab= "alpha")
#plotting scatterplot
plot(posterior$alpha.cur, posterior$beta.cur, main = "bivariate posterior distribution", xlab = "alpha", ylab = "beta")
fun <- function (x) cos(2*x)^3
curve(fun(x), 0, 8)
abline(h = 0, lty = 3)
uni <- uniroot(fun, c(0, 8))$root
points(uni, 0, pch = 16, cex = 2)
uni
fun <- function(x) r-(p*x)-(x/(1+x^2))
curve(fun(x), 0, 8)
r = 2
p = 3
fun <- function(x) r-(p*x)-(x/(1+x^2))
curve(fun(x), 0, 8)
curve(fun(x), 0, 100)
abline(h = 0, lty = 3)
curve(fun(x), -100, 100)
abline(h = 0, lty = 3)
uni <- uniroot(fun, c(0, 8))$root
points(uni, 0, pch = 16, cex = 2)
uni
getwd website
getwd(website)
setwd("/c/Users/User/website")
getwd()
setwd("/c/Users/User/Desktop/website")
setwd("C:/Users/User/Desktop/website")
getwd()
install.packages("blogdown")
install_hugo()
library(blogdown)
install_hugo()
new_site(theme = "gcushen/hugo-academic",
sample = TRUE,
theme_example = TRUE,
empty_dirs = TRUE,
to_yaml = TRUE)
new_site(theme = "gcushen/hugo-academic",
sample = TRUE,
theme_example = TRUE,
empty_dirs = TRUE,
to_yaml = TRUE)
R.version.string
install.packages(installr)
install.packages("installr")
install.Rtools(choose_version = TRUE, check = FALSE, GUI = TRUE,
page_with_download_url = "https://cran.r-project.org/bin/windows/Rtools/",
...)
library(blogdown)
install_hugo()
new_site(theme = "gcushen/hugo-academic",
sample = TRUE,
theme_example = TRUE,
empty_dirs = TRUE,
to_yaml = TRUE)
setwd("C:\Users\User\website")
setwd("C:/Users/User/website")
getwd()
install.packages("blogdown")
library(blogdown)
R.version.string
installr:install.packages("installr")
install.packages("installr")
library(installr)
updateR()
setwd("C:/Users/User/website")
getwd()
install.packages("blogdown")
library(blogdown)
R.version.string
